#!/bin/bash

RED='\033[1;31m'
NC='\033[0m'
GREEN='\033[1;32m'

start=$(date +%s)
time=$(date +%F_%H-%M-%S);

if [[ $1 == "daily" ]] || [[ $1 == "monthly" ]]; then
  date=$(date --date="Sun" +"%F")
  if echo $time | grep -q $date; then
    echo -e "This is Sunday, cannot backup because ${RED}weekly${NC} backup may be running.."
    exit 0
  fi
fi
if [[ $1 == "daily" ]] || [[ $1 == "weekly" ]]; then
  date=$(date +"%Y"-"%m"-01)
  if echo $time | grep -q $date; then
    echo -e "This is first day of a Month, cannot backup because ${RED}monthly${NC} backup may be running.."
    exit 0
  fi
fi
if [[ $1 == "daily" ]] || [[ $1 == "weekly" ]] || [[ $1 == "monthly" ]]; then
  date=$(date +"%Y"-01-01)
  if echo $time | grep -q $date; then
    echo -e "This is first day of a Year, cannot backup because ${RED}yearly${NC} backup may be running.."
    exit 0
  fi
fi

# Path to upcli directory
if [[ $(id -u) == 0 ]]; then
  BASE_DIR="/etc/upcli"
else
  BASE_DIR="$HOME/.config/upcli"
fi

RETENTION=$1

## VARIABLES

# Backup Directory
if [[ $BATCH == true ]]; then
  BACKUP_NAME_BATCH=$(echo $BACKUP_NAME | awk -F "-" '{print $1}')
  BACKUP_NAME_NEW=$BACKUP_NAME_BATCH
  BACKUP_NAME_NEW=$(echo $BACKUP_NAME_NEW | sed -e 's/\-/\\\-/g')
  BACKUP_NAME=$(echo $BACKUP_NAME | sed -e 's/'$BACKUP_NAME_NEW'//' -e 's/\-//')
  BACKUP_DIR="$BASE_DIR/backups/$BACKUP_NAME_BATCH/$BACKUP_NAME"
  NEXTCLOUD_PATH_DB="$NEXTCLOUD_PATH_DB/$BACKUP_NAME"
  NEXTCLOUD_PATH_DIR="$NEXTCLOUD_PATH_DIR/$BACKUP_NAME"
else
  BACKUP_DIR="$BASE_DIR/backups/$BACKUP_NAME"
fi

function createBackupDir() {
  function mkdirRetention() {
    if [[ ! -d $BACKUP_DIR/$1 ]]; then
      if ! mkdir $BACKUP_DIR/$1; then
        echo -e "Error while creating ${RED}$1${NC} directory.."
        exit 1
      fi
    fi
  }
  function showError() {
    echo -e "Cennot create directory ${RED}$1${NC}, because backup job ${RED}\"$BACKUP_NAME\"${NC} doesn't defined as ${RED}$1${NC} backup.."
    exit 1
  }
  if [[ $RETENTION == "yearly" ]]; then
    if [[ $YEARLY != true ]]; then
      showError $1
    else
      mkdirRetention $1
      BACKUP_DIR="$BACKUP_DIR/$1"
    fi
  fi
  if [[ $RETENTION == "monthly" ]]; then
    if [[ $MONTHLY == "" ]]; then
      showError $1
    else
      mkdirRetention $1
      BACKUP_DIR="$BACKUP_DIR/$1"
    fi
  fi
  if [[ $RETENTION == "weekly" ]]; then
    if [[ $WEEKLY == "" ]]; then
      showError $1
    else
      mkdirRetention $1
      BACKUP_DIR="$BACKUP_DIR/$1"
    fi
  fi
  if [[ $RETENTION == "daily" ]]; then
    if [[ $DAILY == "" ]]; then
      showError $1
    else
      mkdirRetention $1
      BACKUP_DIR="$BACKUP_DIR/$1"
    fi
  fi
}
createBackupDir $1;

function telegramNotify() {
if [[ $TOKEN_BOT_TELEGRAM != "" ]] && [[ $ID_BOT_TELEGRAM != "" ]]; then
  MESSAGE=$1
  curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=$ID_BOT_TELEGRAM -d text="UPCLI NOTIFY
Hostname : $(cat /etc/hostname)
Job Name : $BACKUP_NAME

$MESSAGE
" &>> $BACKUP_DIR/log
fi
}

function actionAtNextcloud() {
  if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
  curl -X $1 -u $NEXTCLOUD_USERNAME:$NEXTCLOUD_PASS "$NEXTCLOUD_HOST/remote.php/dav/files/$NEXTCLOUD_USERNAME/$2/$3" -D $BACKUP_DIR/nextcloud-log | tee -a $BACKUP_DIR/log &> /tmp/upcli-output
  fi
}

function createDirInNextcloud() {
  if [[ $NEXTCLOUD_PATH_DB != "" ]]; then
    for i in {1..5} ; do
      if [[ $BATCH == true ]]; then
        actionAtNextcloud MKCOL $NEXTCLOUD_PATH_DB
      fi
      actionAtNextcloud MKCOL $NEXTCLOUD_PATH_DB $1;
      if cat /tmp/upcli-output | grep -q "already exists" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/1.1 201" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/2 201" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/2.0 201" ; then
        NEXTCLOUD_PATH_DB_DONE=true
        break
      fi
    done
    if [[ $NEXTCLOUD_PATH_DB_DONE != true ]]; then
      telegramNotify "Failed create directory $1 in Nextcloud..
Please read log at $BACKUP_DIR/log"
      return 1
    fi
  fi
  if [[ $NEXTCLOUD_PATH_DIR != "" ]]; then
    for i in {1..5} ; do
      if [[ $BATCH == true ]]; then
        actionAtNextcloud MKCOL $NEXTCLOUD_PATH_DIR
      fi
      actionAtNextcloud MKCOL $NEXTCLOUD_PATH_DIR $1
      if cat /tmp/upcli-output | grep -q "already exists" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/1.1 201" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/2 201" || cat $BACKUP_DIR/nextcloud-log | head -n 1 | grep -q "HTTP/2.0 201" ; then
        NEXTCLOUD_PATH_DIR_DONE=true
        break
      fi
    done
    if [[ $NEXTCLOUD_PATH_DIR_DONE != true ]]; then
      telegramNotify "Failed create directory $1 in Nextcloud..
Please read log at $BACKUP_DIR/log"
      return 1
    fi
  fi
}

if [[ $1 == "yearly" ]]; then
  if [[ $YEARLY == true ]]; then
    if ! createDirInNextcloud "yearly"; then
      exit 1
    fi
  fi
fi
if [[ $1 == "monthly" ]]; then
  if [[ $MONTHLY != "" ]]; then
    if ! createDirInNextcloud "monthly"; then
      exit 1
    fi
  fi
fi
if [[ $1 == "weekly" ]]; then
  if [[ $WEEKLY != "" ]]; then
    if ! createDirInNextcloud "weekly"; then
      exit 1
    fi
  fi
fi
if [[ $1 == "daily" ]]; then
  if [[ $DAILY != "" ]]; then
    if ! createDirInNextcloud "daily"; then
      exit 1
    fi
  fi
fi

function uploadToNextcloud () {
  curl -T $BACKUP_DIR/$1 -u $NEXTCLOUD_USERNAME:$NEXTCLOUD_PASS "$NEXTCLOUD_HOST/remote.php/dav/files/$NEXTCLOUD_USERNAME/$2/$1" | tee $BACKUP_DIR/log &> /tmp/upcli-output 
  actionAtNextcloud PROPFIND $2 $1;
}

function checkIfCapacityIsEnough(){
rootSize=$(df -h | grep -E "(^| )/( |$)" | awk '{print $4}')
rootSizeLetter=$(echo ${rootSize: -1})
rootSizeNoLetter=$(echo $rootSize | sed 's/.$//')
if [[ $rootSizeLetter == $2  ]]; then
  calculateSize=$(echo "$rootSizeNoLetter > $1" | bc)
  if [[ ! $calculateSize == 1 ]]; then
    return 1
  else
    return 0
  fi
else
  if [[ $rootSizeLetter == "G" ]] && [[ $2 == "M" ]]; then
    return 0
  elif [[ $rootSizeLetter == "G" ]] && [[ $2 == "K" ]]; then
    return 0
  elif [[ $rootSizeLetter == "M" ]] && [[ $2 == "K" ]]; then
    return 0
  else
    return 1
  fi
fi
}

function deleteLocalBackup() {
  
  if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
    getBak=$(ls $BACKUP_DIR | grep $time)
  else
    date=$(date --date="yesterday" +"%F")
    getBak=$(ls $BACKUP_DIR | grep $date)
  fi

  if [[ $getBak != "" ]]; then
    for file in ${getBak[@]} ; do
      if rm $BACKUP_DIR/$file; then
        echo ""
        if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
          echo "Success delete local backup: $file"
        else
          echo "Success delete yesterday's backup: $file"
        fi
      fi
    done
  fi

}


# DATABASE
if [[ $DB_NAME != "" ]]; then

  if [[ $NO_DB_CREDS == true ]]; then
    databaseSize=$(mysql -h $DB_HOST -e 'SELECT table_schema "DB Name",ROUND(SUM(data_length + index_length)) "DB Size" FROM information_schema.tables GROUP BY table_schema;' | grep -E "(^| )$DB_NAME( |$)" | awk -F "|" '{print $3}' | sed 's/ //g' | numfmt --to=iec)
    if [[ $databaseSize == "" ]]; then
      databaseSize=$(mysql -h $DB_HOST -e 'SELECT table_schema "DB Name",ROUND(SUM(data_length + index_length)) "DB Size" FROM information_schema.tables GROUP BY table_schema;' | egrep "\<$DB_NAME\>" | awk '{print $2}' | sed 's/ //g' | numfmt --to=iec)
    fi
  else
    if [[ $databaseSize == "" ]]; then
      databaseSize=$(mysql -h $DB_HOST -u $DB_USERNAME -p"$DB_PASS" -e 'SELECT table_schema "DB Name",ROUND(SUM(data_length + index_length)) "DB Size" FROM information_schema.tables GROUP BY table_schema;' | grep -E "(^| )$DB_NAME( |$)" | awk -F "|" '{print $3}' | sed 's/ //g' | numfmt --to=iec)
      databaseSize=$(mysql -h $DB_HOST -u $DB_USERNAME -p"$DB_PASS" -e 'SELECT table_schema "DB Name",ROUND(SUM(data_length + index_length)) "DB Size" FROM information_schema.tables GROUP BY table_schema;' | egrep "\<$DB_NAME\>" | awk '{print $2}' | sed 's/ //g' | numfmt --to=iec)
    fi
  fi
    
  fi
  databaseSizeLetter=$(echo ${databaseSize: -1})
  databaseSizeNoLetter=$(echo $databaseSize | sed 's/.$//')

  if ! checkIfCapacityIsEnough $databaseSizeNoLetter $databaseSizeLetter; then
    if [[ $databaseSize == "" ]]; then
      echo -e "Error backup database, Cannot find database ${RED}$DB_NAME${NC} or database ${RED}$DB_NAME${NC} is empty.. "
      telegramNotify "Service database error or database $DB_NAME is empty, please do manual troubleshoot.."
    else
      echo -e "Cannot backup Database ${RED}$DB_NAME${NC}, not enough disk space..\nRoot Size: $rootSize.\nDatabase Size: $databaseSize."
      telegramNotify "Cannot backup Database $DB_NAME, not enough disk space..
Root Size: $rootSize.
Database Size: $databaseSize."
    fi

  else

    echo -e "Dumping database ${GREEN}$DB_NAME${NC}.."
    if [[ $NO_DB_CREDS == true ]]; then
      if mysqldump -h $DB_HOST $DB_NAME | gzip -c &> $BACKUP_DIR/$DB_NAME-$time.sql.gz; then
        echo -e "Success dump database ${GREEN}$DB_NAME${NC}..";
        DUMP_DONE=true
      else
        echo -e "Failed dump database ${RED}$DB_NAME${NC}..";
        telegramNotify "Please read log at $BACKUP_DIR/log
or you can see output of $BACKUP_DIR/$DB_NAME.sql file..
"
      fi
    else
      if mysqldump -h $DB_HOST -u $DB_USERNAME -p"$DB_PASS" $DB_NAME | gzip -c &> $BACKUP_DIR/$DB_NAME-$time.sql.gz; then
        echo -e "Success dump database ${GREEN}$DB_NAME${NC}..";
        DUMP_DONE=true
      else
        echo -e "Failed dump database ${RED}$DB_NAME${NC}..";
        telegramNotify "Failed dump database $DB_NAME..
Please read log at $BACKUP_DIR/log
or you can see output of $BACKUP_DIR/$DB_NAME.sql file..
"
      fi
    fi

  start=$(date +%s)

  if [[ $DUMP_DONE == true ]]; then
    
    echo "Uploading to Nextcloud.."

    if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
      for i in {1..5} ; do
        uploadToNextcloud "$DB_NAME-$time.sql.gz" "$NEXTCLOUD_PATH_DB/$1";

        if cat /tmp/upcli-output | grep -q "200 OK"; then
          break
        fi
      done

      if ! cat /tmp/upcli-output | grep -q "200 OK"; then
        echo -e "Failed upload database ${RED}$DB_NAME${NC} to Nextcloud.."
        echo 'Elapsed time '$((end-start))' seconds..'
        telegramNotify "Failed upload database $DB_NAME to Nextcloud..
Please read log at $BACKUP_DIR/log"
        exit 1
      else
        echo ""
        echo -e "Success upload database ${GREEN}$DB_NAME${NC} to Nextcloud"
        UPLOAD_DATABASE=true
      fi
    fi

    deleteLocalBackup;

  fi

  end=$(date +%s)

  echo 'Elapsed time '$((end-start))' seconds..'

fi

# Directory
function backupDirectory() {
  echo $PATH_DIR > /tmp/upcli-output 
  DIR_NAME=$(cat /tmp/upcli-output | awk -F "/" '{print $NF}')
  path_dirSize=$(du -sh $PATH_DIR | awk '{print $1}')
  path_dirSizeLetter=$(echo ${path_dirSize: -1})
  path_dirSizeNoLetter=$(echo $path_dirSize | sed 's/.$//')

  if ! checkIfCapacityIsEnough $path_dirSizeNoLetter $path_dirSizeLetter; then
    if [[ $path_dirSize == "" ]]; then
      echo -e "Error backup directory, Cannot find directory ${RED}$DIR_NAME${NC} or directory ${RED}$DIR_NAME${NC} is empty.. "
      telegramNotify "Error backup directory, Cannot find directory $DIR_NAME, or directory $DIR_NAME is empty.."
    else
      echo -e "Cannot backup Directory ${RED}$DIR_NAME${NC}, not enough disk space..\nRoot Size: $rootSize.\nDirectory Size: $path_dirSize."
      telegramNotify "Cannot backup Directory ${RED}$DIR_NAME${NC}, not enough disk space..
Root Size: $rootSize.
Directory Size: $path_dirSize."
    fi
  else
    cd $PATH_DIR
    cd ..
    if ! tar -zcvf $BACKUP_DIR/$DIR_NAME-$time.tar.gz $DIR_NAME | tee -a $BACKUP_DIR/log; then
      telegramNotify "Failed to archive $DIR_NAME..
Please read log at $BACKUP_DIR/log"
      return 1
    else
      DIR_DONE=true
    fi
    # Nextcloud
    if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
      for i in {1..5} ; do
        uploadToNextcloud "$DIR_NAME-$time.tar.gz" "$NEXTCLOUD_PATH_DIR/$RETENTION";

        if cat /tmp/upcli-output | grep -q "200 OK"; then
          break
        fi
      done

      if ! cat /tmp/upcli-output | grep -q "200 OK"; then
        echo -e "Failed upload directory ${RED}$DIR_NAME${NC} to Nextcloud.."
        echo 'Elapsed time '$((end-start))' seconds..'
        telegramNotify "Failed upload directory $DIR_NAME to Nextcloud..
Please read log at $BACKUP_DIR/log"
        return 1
      else
        echo ""
        echo -e "Success upload directory ${GREEN}$DIR_NAME${NC} to Nextcloud"

        deleteLocalBackup;

        return 0
      fi
    fi
  fi
}
if [[ $PATH_DIR != "" ]]; then
  for p in ${PATH_DIR[@]} ; do
    PATH_DIR=$p
    if ! backupDirectory; then
      exit 1
    else
      UPLOAD_DIRECTORY+=("$DIR_NAME")
      UPLOAD_DIRECTORY_DELETE+=("$DIR_NAME")
    fi
  done

  ## Set UPLOAD_DIRECTORY to right like array
  UPLOAD_DIRECTORY_LIST="$(for p in ${UPLOAD_DIRECTORY[@]}; do echo $p-$time.tar.gz; done)"
  UPLOAD_DIRECTORY="$(for p in ${UPLOAD_DIRECTORY[@]}; do echo $p; done)"
  ## Remove newline
  UPLOAD_DIRECTORY=$(echo $UPLOAD_DIRECTORY | awk 1 ORS='';echo)

  UPLOAD_DIRECTORY_LIST=$(echo $UPLOAD_DIRECTORY_LIST | awk 1 ORS='';echo)
fi

if [[ $UPLOAD_DATABASE == true ]] && [[ $UPLOAD_DIRECTORY != "" ]]; then
  telegramNotify "Backup database $DB_NAME and backup directory $UPLOAD_DIRECTORY succeed.."
  echo "$DB_NAME-$time.sql.gz $UPLOAD_DIRECTORY_LIST" >> $BACKUP_DIR/backup-retention-list
elif [[ $UPLOAD_DATABASE == true ]]; then
  telegramNotify "Backup database $DB_NAME succeed.."
    echo "$DB_NAME-$time.sql.gz" >> $BACKUP_DIR/backup-retention-list
elif [[ $UPLOAD_DIRECTORY != "" ]]; then
  telegramNotify "Backup directory $UPLOAD_DIRECTORY succeed.."
    echo "$UPLOAD_DIRECTORY_LIST" >> $BACKUP_DIR/backup-retention-list
fi

# Delete backup
function deleteBackupInNextcloud() {
  file=$2
  for p in ${UPLOAD_DIRECTORY_DELETE[@]} ; do
    if echo $file | grep -q $p; then
      for i in {1..5}; do
        actionAtNextcloud DELETE "$NEXTCLOUD_PATH_DIR/$RETENTION" $file;
        if cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/2 20" || cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/2.0 20" || cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/1.1 20"; then
          echo ""
          echo $1
          DELETE_BACKUP_DIR=true
          break
        fi
      done
      if [[ $DELETE_BACKUP_DIR != true ]]; then
        if cat /tmp/upcli-output | grep -q "could not be located"; then
        telegramNotify "Failed delete backup directory $file in Nextcloud..
Directory $file could not be located.
Please read log at $BACKUP_DIR/log"
        else
        telegramNotify "Failed delete backup directory $file in Nextcloud..
Please read log at $BACKUP_DIR/log"
        fi
      fi
    fi
  done

  if echo $file | grep -q $DB_NAME; then
    for i in {1..5}; do
      actionAtNextcloud DELETE "$NEXTCLOUD_PATH_DB/$RETENTION" $file;
      if cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/2 20" || cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/2.0 20" || cat $BACKUP_DIR/nextcloud-log | grep -q "HTTP/1.1 20"; then
        echo ""
        echo $1
        DELETE_BACKUP_DB=true
        break
      fi
    done
    if [[ $DELETE_BACKUP_DB != true ]]; then
      if cat /tmp/upcli-output | grep -q "could not be located"; then
      telegramNotify "Failed delete backup database $file in Nextcloud..
Database $file could not be located.
Please read log at $BACKUP_DIR/log"
      else
      telegramNotify "Failed delete backup database $file in Nextcloud..
Please read log at $BACKUP_DIR/log"
      fi
    fi
  fi
}

# Delete backup retention in nextcloud
if [[ $NEXTCLOUD_USERNAME != "" ]] && [[ $NEXTCLOUD_PASS != "" ]]; then
  file=($(cat $BACKUP_DIR/backup-retention-list | awk 'FNR==1 {print $0}'))
  if [[ $RETENTION == "monthly" ]]; then
    COUNT_RETENTION=$(awk 'END{print NR}' $BACKUP_DIR/backup-retention-list)
    if [[ $COUNT_RETENTION == $(($MONTHLY + 1)) ]]; then
      for f in ${file[@]} ; do
        deleteBackupInNextcloud "Success delete $1 backup in Nextcloud: $f" $f
        unset qDELETE_BACKUP_DIR
      done
      sed -i '1d' $BACKUP_DIR/backup-retention-list
    fi
  fi
  if [[ $RETENTION == "weekly" ]]; then
    COUNT_RETENTION=$(awk 'END{print NR}' $BACKUP_DIR/backup-retention-list)
    if [[ $COUNT_RETENTION == $(($WEEKLY + 1)) ]]; then
      for f in ${file[@]} ; do
        deleteBackupInNextcloud "Success delete $1 backup in Nextcloud: $f" $f
        unset qDELETE_BACKUP_DIR
      done
      sed -i '1d' $BACKUP_DIR/backup-retention-list
    fi
  fi
  if [[ $RETENTION == "daily" ]]; then
    COUNT_RETENTION=$(awk 'END{print NR}' $BACKUP_DIR/backup-retention-list)
    if [[ $COUNT_RETENTION == $(($DAILY + 1)) ]]; then
      for f in ${file[@]} ; do
        deleteBackupInNextcloud "Success delete $1 backup in Nextcloud: $f" $f
        unset qDELETE_BACKUP_DIR
      done
      sed -i '1d' $BACKUP_DIR/backup-retention-list
    fi
  fi
fi

echo ""
echo "-------------"
echo -e "| ${GREEN}Success${NC}.. |"
echo "-------------"
